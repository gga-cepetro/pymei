#!/usr/bin/env python3
import matplotlib.pyplot as plt
import numpy as np
import pymei
import argparse

parser = argparse.ArgumentParser(description="Plots midpoints of a data as points in space")
parser.add_argument('data', metavar='DATA', type=str, nargs=1, help='path for a seismic files')
parser.add_argument('-r', dest='ang', metavar='ANGLE', type=float, \
        default=0, help='rotate the coordinate system clock-wise')
args = parser.parse_args()

ang = args.ang * np.pi / 180

# Clock-wise rotation matrix
rot = np.array([
    [ np.cos(ang), np.sin(ang)],
    [-np.sin(ang), np.cos(ang)]])

locs = []
locspos = -1
locsplt = None
wigplt = None

def kpress(event):
    global locs
    global locspos
    global locsplt
    global fig
    global wigplt

    if len(locs) == 0:
        return

    if locsplt != None:
        locsplt.remove()
        locsplt = None

    if wigplt != None:
        wigplt.remove()
        wigplt = None

    if locspos < 0:
        locspos = 0
    else:
        if event.key == 'right':
            locspos += 1
        elif event.key == 'left':
            locspos -= 1
        elif event.key == 'up':
            locspos += len(locs) // 20
        elif event.key == 'down':
            locspos -= len(locs) // 20
        else:
            return

    if locspos < 0:
        locspos = len(locs) - 1
    elif locspos >= len(locs):
        locspos = 0

    print("I=%d, CDP=%d, MX=%f, MY=%f, HX=%f, HY=%f, TID=%d, TOF=%d" % locs[locspos])

    locsplt, = ax1.plot([locs[locspos][2]], [locs[locspos][3]], 
        marker='o', c='red')

    tr = data.readTrace(int(locs[locspos][7]))
    wigplt, = ax2.plot(tr.data, tr.dt * np.arange(len(tr.data)), c='black')   
    ax2.set_ylim([0, tr.dt * len(tr.data)])
    ax2.invert_yaxis()

    fig.canvas.draw()

def mpress(event):
    global locs
    global locspos
    global locsplt
    global fig
    global wigplt

    mx = event.xdata
    my = event.ydata

    if mx == None or my == None:
        return

    if event.inaxes == None:
        return
    elif event.inaxes == ax2:
        tr = data.readTrace(int(locs[locspos][7]))
        s = my // tr.dt
        print("TIME=%f SAMPLE=%d A(SAMPLE)=%f" % (my,s,tr.data[s]))
    elif event.inaxes == ax1:
        dmin = -1
        jmin = -1
        for j, l in enumerate(locs):
            i, cdp, x, y, a, b, tid, tof = l
            d = (x-mx)**2 + (y-my)**2
            if dmin < 0 or d < dmin:
                dmin = d
                jmin = j

        if jmin < 0:
            return

        if locsplt != None:
            locsplt.remove()
            locsplt = None

        if wigplt != None:
            wigplt.remove()
            wigplt = None

        locspos = jmin
        print("I=%d, CDP=%d, MX=%f, MY=%f, HX=%f, HY=%f, TID=%d, TOF=%d" % locs[locspos])

        locsplt, = ax1.plot([locs[locspos][2]], [locs[locspos][3]], 
            marker='o', c='red')

        tr = data.readTrace(int(locs[locspos][7]))
        wigplt, = ax2.plot(tr.data, tr.dt * np.arange(len(tr.data)), c='black')
        ax2.set_ylim([0, tr.dt * len(tr.data)])
        ax2.invert_yaxis()

        fig.canvas.draw()


fig = plt.figure()
fig.canvas.mpl_connect('key_press_event', kpress)
fig.canvas.mpl_connect('button_press_event', mpress)

ax1 = plt.subplot2grid((1,3), (0,1), colspan=2)
ax2 = plt.subplot2grid((1,3), (0,0), colspan=1)
ax2.invert_yaxis()

i = 0
path = args.data[0]

data = pymei.load(path)
I = np.array([(tr.mx, tr.my, tr.cdp, tr.hx, tr.hy, j, tr.fof) for j,tr in enumerate(data)])
M = I[:, 0:2]
M = rot.dot(M.T)
cdp = I[:, 2]
locs = locs + [(i, ) + j for j in zip(cdp, M[0, :], M[1, :], I[:,3], I[:,4], I[:,5], I[:,6])]
cax=ax1.scatter(M[0, :], M[1, :], marker='x', c=cdp)
plt.colorbar(cax)

plt.show()
