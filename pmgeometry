#!/usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np
import pymei
import argparse

parser = argparse.ArgumentParser(description="Plots midpoints of a data as points in space")
parser.add_argument('data', metavar='DATA', type=str, nargs=1, help='path for a seismic files')
parser.add_argument('-r', dest='ang', metavar='ANGLE', type=float, \
        default=0, help='rotate the coordinate system clock-wise')
args = parser.parse_args()

ang = args.ang * np.pi / 180

# Clock-wise rotation matrix
rot = np.array([
    [ np.cos(ang), np.sin(ang)],
    [-np.sin(ang), np.cos(ang)]])

locs = []
locspos = -1
locsplt = None

def kpress(event):
    global locs
    global locspos
    global locsplt
    global fig

    if len(locs) == 0:
        return

    if locsplt != None:
        locsplt.remove()
        locsplt = None

    if locspos < 0:
        locspos = 0
    else:
        if event.key == 'right':
            locspos += 1
        elif event.key == 'left':
            locspos -= 1
        elif event.key == 'up':
            locspos += len(locs) // 20
        elif event.key == 'down':
            locspos -= len(locs) // 20
        else:
            return

    if locspos < 0:
        locspos = len(locs) - 1
    elif locspos >= len(locs):
        locspos = 0

    print("I=%d, CDP=%d, X=%f, Y=%f" % locs[locspos])

    locsplt, = ax.plot([locs[locspos][2]], [locs[locspos][3]], 
        marker='o', c='red')

    fig.canvas.draw()

def mpress(event):
    global locs
    global locspos
    global locsplt
    global fig

    mx = event.xdata
    my = event.ydata

    if mx == None or my == None:
        return

    dmin = -1
    jmin = -1
    for j, l in enumerate(locs):
        i, cdp, x, y = l
        d = (x-mx)**2 + (y-my)**2
        if dmin < 0 or d < dmin:
            dmin = d
            jmin = j

    if jmin < 0:
        return

    if locsplt != None:
        locsplt.remove()
        locsplt = None

    locspos = jmin
    print("I=%d, CDP=%d, X=%f, Y=%f" % locs[locspos])

    locsplt, = ax.plot([locs[locspos][2]], [locs[locspos][3]], 
        marker='o', c='red')

    fig.canvas.draw()


fig, ax = plt.subplots()
fig.canvas.mpl_connect('key_press_event', kpress)
fig.canvas.mpl_connect('button_press_event', mpress)

for i, path in enumerate(args.data):
    data = pymei.load(path)
    I = np.array([(tr.mx, tr.my, tr.cdp) for tr in data])
    M = I[:, 0:2]
    M = rot.dot(M.T)
    cdp = I[:, 2]
    locs = locs + [(i, ) + j for j in zip(cdp, M[0, :], M[1, :])]
    plt.scatter(M[0, :], M[1, :], marker='x', c=cdp)
    plt.colorbar()

plt.show()
